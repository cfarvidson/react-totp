{"version":3,"sources":["components/totp.js","utils.js","components/faq.js","App.js","serviceWorker.js","index.js","totp.js"],"names":["generateToken","secret","totp","generateTOTP","_","padStart","useState","setSecret","setTotp","error","setError","inputRef","useRef","useEffect","interval","setInterval","clearInterval","className","replace","type","onClick","ref","placeholder","current","value","Wrapper","children","Question","Answer","href","App","style","maxWidth","class","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","generateHOTP","counter","decodedSecret","base32","decode","asBytes","buffer","Buffer","alloc","i","hmac","crypto","createHmac","from","update","hmacValue","offset","length","dynamicTruncationFn","digest","Math","floor","Date","now"],"mappings":"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","file":"static/js/main.74650a20.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport _ from \"lodash\";\n\nimport { generateTOTP } from \"../totp\";\nimport { numberWithSpaces } from \"../utils\";\n\nconst generateToken = (secret) => {\n  const totp = generateTOTP(secret);\n  return _.padStart(totp, 6, \"0\");\n};\n\nexport default () => {\n  const [secret, setSecret] = useState(null);\n  const [totp, setTotp] = useState(null);\n  const [error, setError] = useState(null);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (secret) {\n      const interval = setInterval(() => {\n        setTotp(generateToken(secret));\n      }, 2000);\n      return () => clearInterval(interval);\n    }\n  }, [secret]);\n\n  const handleSubmit = () => {\n    try {\n      const secret = inputRef.current.value.replace(/\\s/g, \"\");\n      setTotp(generateToken(secret));\n      setSecret(secret);\n    } catch {\n      setError(\"Invalid secret, please enter a valid secret\");\n    }\n  };\n\n  if (secret) {\n    return (\n      <>\n        <p className=\"is-size-1 has-text-centered\">{numberWithSpaces(totp)}</p>\n        <p className=\"content has-text-centered pt-4\">\n          <div className=\"control\">\n            <button\n              className=\"button is-danger\"\n              type=\"submit\"\n              onClick={() => setSecret(null)}\n            >\n              Reset\n            </button>\n          </div>\n        </p>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <div className=\"field\">\n          <label className=\"label\">Secret</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              type=\"password\"\n              ref={inputRef}\n              placeholder=\"ABCD 1234 ABCD 1234\"\n            />\n          </div>\n          {error && <p className=\"help is-danger\">{error}</p>}\n          <p className=\"help\">\n            The secret code that you used to create your TOTP in the first\n            place.\n          </p>\n        </div>\n\n        <div className=\"control has-text-centered pt-3\">\n          <button\n            className=\"button is-primary\"\n            type=\"submit\"\n            onClick={handleSubmit}\n          >\n            Generate\n          </button>\n        </div>\n      </>\n    );\n  }\n};\n","export function numberWithSpaces(string) {\n  return string.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n}\n","import React from \"react\";\n\nconst Wrapper = ({ children }) => <div className=\"pb-5\">{children}</div>;\n\nconst Question = ({ children }) => (\n  <p className=\"has-text-weight-bold\">{children}</p>\n);\nconst Answer = ({ children }) => <p className=\"pt-2\">{children}</p>;\n\nexport default () => {\n  return (\n    <>\n      <Wrapper>\n        <Question>What is OTP and TOTP?</Question>\n        <Answer>\n          <a href=\"https://en.wikipedia.org/wiki/Time-based_One-time_Password_algorithm\">\n            Wikipedia\n          </a>{\" \"}\n          explains how it works better than I will. But the short version is\n          that it's the code that apps like Google Authenticator generates that\n          can be used as a second factor on many sites and services.\n        </Answer>\n      </Wrapper>\n      <Wrapper>\n        <Question>How can this be secure?</Question>\n        <Answer>\n          No data leaves this website. Everything that you see here is being\n          rendered in your browser on your device.\n        </Answer>\n      </Wrapper>\n      <Wrapper>\n        <Question>\n          How can I verify that no data is being sent elsewhere?\n        </Question>\n        <Answer>\n          Right click anywhere on this page and select Inspect or Inspect\n          Element. Then open the network tab and reload the page.\n        </Answer>\n        <Answer>\n          You can also check out the{\" \"}\n          <a href=\"https://github.com/cfarvidson/react-totp\">source code</a>.\n        </Answer>\n      </Wrapper>\n      <Wrapper>\n        <Question>\n          Isn't the whole point of TOTP and 2FA to not be stored anywhere other\n          than on that device?\n        </Question>\n        <Answer>Yes!</Answer>\n        <Answer>\n          But some password wallet services does not offer backup codes for your\n          2FA.\n        </Answer>\n        <Answer>\n          What happens if you are on a trip and your phone is stolen and you\n          can't event contact anyone before you get in to your password wallet?\n        </Answer>\n        <Answer>\n          If you store your secret somewhere (on paper or on the internet) where\n          only you know where it is you can then access this page to genererate\n          a secret.\n        </Answer>\n      </Wrapper>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"bulma\";\n\nimport Totp from \"./components/totp\";\nimport Faq from \"./components/faq\";\n\nfunction App() {\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title has-text-centered\">React TOTP</h1>\n          <h2 className=\"subtitle has-text-centered pt-2\">\n            The One-time Password Generator for when you have lost everything.\n          </h2>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container is-centered\" style={{ maxWidth: \"400px\" }}>\n          <Totp />\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\" style={{ maxWidth: \"700px\" }}>\n          <Faq />\n        </div>\n      </section>\n      <footer class=\"footer\">\n        <div class=\"content has-text-centered\">\n          <p>\n            Built with{\" \"}\n            <span role=\"img\" aria-label=\"heart emoji\">\n              ❤️\n            </span>{\" \"}\n            by{\" \"}\n            <a href=\"https://carl-fredrik.arvidson.io\">Carl-Fredrik Arvidson</a>\n          </p>\n        </div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import crypto from \"crypto\";\nimport base32 from \"hi-base32\";\n\nexport const generateSecret = (length = 20) => {\n  const randomBuffer = crypto.randomBytes(length);\n  return base32.encode(randomBuffer).replace(/=/g, \"\");\n};\n\nconst dynamicTruncationFn = (hmacValue) => {\n  const offset = hmacValue[hmacValue.length - 1] & 0xf;\n\n  return (\n    ((hmacValue[offset] & 0x7f) << 24) |\n    ((hmacValue[offset + 1] & 0xff) << 16) |\n    ((hmacValue[offset + 2] & 0xff) << 8) |\n    (hmacValue[offset + 3] & 0xff)\n  );\n};\n\nconst generateHOTP = (secret, counter) => {\n  const decodedSecret = base32.decode.asBytes(secret);\n  const buffer = Buffer.alloc(8);\n  for (let i = 0; i < 8; i++) {\n    buffer[7 - i] = counter & 0xff;\n    counter = counter >> 8;\n  }\n\n  // Step 1: Generate an HMAC-SHA-1 value\n  const hmac = crypto.createHmac(\"sha1\", Buffer.from(decodedSecret));\n  hmac.update(buffer);\n  const hmacResult = hmac.digest();\n\n  // Step 2: Generate a 4-byte string (Dynamic Truncation)\n  const code = dynamicTruncationFn(hmacResult);\n\n  // Step 3: Compute an HOTP value\n  return code % 10 ** 6;\n};\n\nexport const generateTOTP = (secret, window = 0) => {\n  const counter = Math.floor(Date.now() / 30000);\n  return generateHOTP(secret, counter + window);\n};\n"],"sourceRoot":""}